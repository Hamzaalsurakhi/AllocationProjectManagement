// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241102114730_sacend")]
    partial class sacend
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Entities.Allocation", b =>
                {
                    b.Property<int>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllocationId"));

                    b.Property<int>("AllocationPercentage")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("AllocationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PositionId");

                    b.HasIndex("projectId");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBench")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("MidName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("TeamCountryId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAllocatedPercentage")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamCountryId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataLayer.Entities.LookUp", b =>
                {
                    b.Property<int>("LookUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookUpId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LookupCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LookUpId");

                    b.HasIndex("LookupCategoryId");

                    b.ToTable("LookUp", "LookUp");

                    b.HasData(
                        new
                        {
                            LookUpId = 10,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6240),
                            IsDeleted = false,
                            LookupCategoryId = 1,
                            NameAr = "مطور متكامل",
                            NameEn = "Full Stack Developer"
                        },
                        new
                        {
                            LookUpId = 11,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6244),
                            IsDeleted = false,
                            LookupCategoryId = 1,
                            NameAr = "مطور الواجهة الأمامية",
                            NameEn = "Frontend Developer"
                        },
                        new
                        {
                            LookUpId = 12,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6247),
                            IsDeleted = false,
                            LookupCategoryId = 1,
                            NameAr = "مطور الواجهة الخلفية",
                            NameEn = "Backend Developer"
                        },
                        new
                        {
                            LookUpId = 13,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6250),
                            IsDeleted = false,
                            LookupCategoryId = 1,
                            NameAr = "متخصص في الذكاء الاصطناعي",
                            NameEn = "AI Specialist"
                        },
                        new
                        {
                            LookUpId = 14,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6253),
                            IsDeleted = false,
                            LookupCategoryId = 1,
                            NameAr = "مصمم تجربة المستخدم",
                            NameEn = "UX Designer"
                        },
                        new
                        {
                            LookUpId = 15,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6256),
                            IsDeleted = false,
                            LookupCategoryId = 1,
                            NameAr = "مختبر ضمان الجودة",
                            NameEn = "QA Tester"
                        },
                        new
                        {
                            LookUpId = 16,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6259),
                            IsDeleted = false,
                            LookupCategoryId = 1,
                            NameAr = "محلل أعمال",
                            NameEn = "Business Analyst"
                        },
                        new
                        {
                            LookUpId = 17,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6262),
                            IsDeleted = false,
                            LookupCategoryId = 1,
                            NameAr = "مساعد المدير",
                            NameEn = "Assistant Manager"
                        },
                        new
                        {
                            LookUpId = 31,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6264),
                            IsDeleted = false,
                            LookupCategoryId = 2,
                            NameAr = "جديد",
                            NameEn = "Fresh"
                        },
                        new
                        {
                            LookUpId = 32,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6268),
                            IsDeleted = false,
                            LookupCategoryId = 2,
                            NameAr = "مبتدئ",
                            NameEn = "Junior"
                        },
                        new
                        {
                            LookUpId = 33,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6271),
                            IsDeleted = false,
                            LookupCategoryId = 2,
                            NameAr = "مستوى متوسط - كبير",
                            NameEn = "Mid-Senior Level"
                        },
                        new
                        {
                            LookUpId = 34,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6274),
                            IsDeleted = false,
                            LookupCategoryId = 2,
                            NameAr = "كبير",
                            NameEn = "Senior"
                        },
                        new
                        {
                            LookUpId = 35,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6277),
                            IsDeleted = false,
                            LookupCategoryId = 2,
                            NameAr = "قائد الفريق",
                            NameEn = "Team Leader"
                        },
                        new
                        {
                            LookUpId = 36,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6279),
                            IsDeleted = false,
                            LookupCategoryId = 2,
                            NameAr = " مدير المشروع",
                            NameEn = "Project Manager"
                        },
                        new
                        {
                            LookUpId = 41,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6282),
                            IsDeleted = false,
                            LookupCategoryId = 3,
                            NameAr = "نشط",
                            NameEn = "Active"
                        },
                        new
                        {
                            LookUpId = 42,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6285),
                            IsDeleted = false,
                            LookupCategoryId = 3,
                            NameAr = "معلق",
                            NameEn = "On Hold"
                        },
                        new
                        {
                            LookUpId = 48,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6288),
                            IsDeleted = false,
                            LookupCategoryId = 3,
                            NameAr = "منتهي",
                            NameEn = "Finished"
                        },
                        new
                        {
                            LookUpId = 43,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6290),
                            IsDeleted = false,
                            LookupCategoryId = 3,
                            NameAr = "التصميم",
                            NameEn = "Design"
                        },
                        new
                        {
                            LookUpId = 47,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6293),
                            IsDeleted = false,
                            LookupCategoryId = 3,
                            NameAr = "التطوير",
                            NameEn = "Development"
                        },
                        new
                        {
                            LookUpId = 45,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6296),
                            IsDeleted = false,
                            LookupCategoryId = 3,
                            NameAr = "نشر",
                            NameEn = "Deployment"
                        },
                        new
                        {
                            LookUpId = 46,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6298),
                            IsDeleted = false,
                            LookupCategoryId = 3,
                            NameAr = "الفحص",
                            NameEn = "Testing"
                        },
                        new
                        {
                            LookUpId = 51,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6301),
                            IsDeleted = false,
                            LookupCategoryId = 4,
                            NameAr = "الاردن",
                            NameEn = "Jordan"
                        },
                        new
                        {
                            LookUpId = 52,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6305),
                            IsDeleted = false,
                            LookupCategoryId = 4,
                            NameAr = "المملكة العربية السعودية",
                            NameEn = "Saudi Arabia"
                        },
                        new
                        {
                            LookUpId = 53,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6307),
                            IsDeleted = false,
                            LookupCategoryId = 4,
                            NameAr = "مصر",
                            NameEn = "Egypt"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.LookUpCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("LookUpCategory", "LookUp");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(5960),
                            Description = "Job Positions",
                            IsDeleted = false,
                            NameAr = "الموقع",
                            NameEn = "Position"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(5982),
                            Description = "Experience Levels",
                            IsDeleted = false,
                            NameAr = "المستوى",
                            NameEn = "Level"
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(5991),
                            Description = "Project Statuses",
                            IsDeleted = false,
                            NameAr = "الحالة",
                            NameEn = "Status"
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(5994),
                            Description = "Team in which country is",
                            IsDeleted = false,
                            NameAr = "دولة الفريق",
                            NameEn = "TeamCountry"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("DataLayer.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DataLayer.Entities.Settings", b =>
                {
                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingId");

                    b.ToTable("Settings", "Settings");

                    b.HasData(
                        new
                        {
                            SettingId = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6340),
                            Description = "Allowed types of files that can be uploaded",
                            IsDeleted = false,
                            Key = 8,
                            Value = "jpg,png,pdf"
                        },
                        new
                        {
                            SettingId = 2,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6344),
                            Description = "Name of the application",
                            IsDeleted = false,
                            Key = 1,
                            Value = "Allocation Management System,AMS"
                        },
                        new
                        {
                            SettingId = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6347),
                            Description = "Default language for the application",
                            IsDeleted = false,
                            Key = 2,
                            Value = "en-US"
                        },
                        new
                        {
                            SettingId = 4,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6350),
                            Description = "Default timezone",
                            IsDeleted = false,
                            Key = 3,
                            Value = "UTC"
                        },
                        new
                        {
                            SettingId = 5,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6353),
                            Description = "Date format (e.g., MM/dd/yyyy or dd/MM/yyyy)",
                            IsDeleted = false,
                            Key = 4,
                            Value = "MM/dd/yyyy,dd/MM/yyyy"
                        },
                        new
                        {
                            SettingId = 6,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6355),
                            Description = "Time format (e.g., 12-hour or 24-hour)",
                            IsDeleted = false,
                            Key = 5,
                            Value = "12-hour,24-hour"
                        },
                        new
                        {
                            SettingId = 7,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6358),
                            Description = "Maximum number of failed login attempts before locking an account",
                            IsDeleted = false,
                            Key = 6,
                            Value = "5"
                        },
                        new
                        {
                            SettingId = 8,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6361),
                            Description = "Default report format (PDF, Excel)",
                            IsDeleted = false,
                            Key = 7,
                            Value = "PDF,Excel"
                        },
                        new
                        {
                            SettingId = 9,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6364),
                            Description = "Maximum allowed file size in megabytes",
                            IsDeleted = false,
                            Key = 9,
                            Value = "10"
                        },
                        new
                        {
                            SettingId = 10,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6367),
                            Description = "The URL of the site",
                            IsDeleted = false,
                            Key = 10,
                            Value = ""
                        },
                        new
                        {
                            SettingId = 11,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6370),
                            Description = "Number Of Employees Become Bench",
                            IsDeleted = false,
                            Key = 11,
                            Value = "6"
                        },
                        new
                        {
                            SettingId = 12,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6373),
                            Description = "Type Of File",
                            IsDeleted = false,
                            Key = 12,
                            Value = "png,jpg,jpeg"
                        },
                        new
                        {
                            SettingId = 13,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2024, 11, 2, 14, 47, 30, 604, DateTimeKind.Local).AddTicks(6376),
                            Description = "Number Of Notifications Display",
                            IsDeleted = false,
                            Key = 13,
                            Value = "5"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Allocation", b =>
                {
                    b.HasOne("DataLayer.Entities.Employee", "Employee")
                        .WithMany("ProjectAllocation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.LookUp", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("DataLayer.Entities.LookUp", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("DataLayer.Entities.Project", "Project")
                        .WithMany("allocations")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Level");

                    b.Navigation("Position");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.HasOne("DataLayer.Entities.LookUp", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.LookUp", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.LookUp", "TeamCountry")
                        .WithMany()
                        .HasForeignKey("TeamCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Position");

                    b.Navigation("TeamCountry");
                });

            modelBuilder.Entity("DataLayer.Entities.LookUp", b =>
                {
                    b.HasOne("DataLayer.Entities.LookUpCategory", "LookupCategory")
                        .WithMany("lookUps")
                        .HasForeignKey("LookupCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LookupCategory");
                });

            modelBuilder.Entity("DataLayer.Entities.Project", b =>
                {
                    b.HasOne("DataLayer.Entities.LookUp", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.Navigation("ProjectAllocation");
                });

            modelBuilder.Entity("DataLayer.Entities.LookUpCategory", b =>
                {
                    b.Navigation("lookUps");
                });

            modelBuilder.Entity("DataLayer.Entities.Project", b =>
                {
                    b.Navigation("allocations");
                });
#pragma warning restore 612, 618
        }
    }
}
