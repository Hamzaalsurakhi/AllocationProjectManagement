@model IEnumerable<PresentationLayer.ViewModels.NotificationViewModel>
@{ 
    ViewBag.Title = "Notifications";

}
<style>
    .notification-card {
        border-left: 5px solid #007bff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        position: relative;
    }

        .notification-card:hover {
            transform: scale(1.02);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        .notification-card .card-title {
            font-size: 1.2rem;
        }

        .notification-card .card-text {
            font-size: 1rem;
        }

        .notification-card .blockquote-footer {
            font-size: 0.875rem;
            color: #6c757d;
        }

        .notification-card.read {
            opacity: 0.6;
        }

        .notification-card .icon-container {
            position: absolute;
            cursor: pointer;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 0.5rem;
        }

            .notification-card .icon-container i {
                cursor: pointer;
                font-size: 1rem;
                padding: 0.5rem;
            }

                .notification-card .icon-container i:hover {
                    color: #007bff;
                }
</style>
<link href="~/css/ProjectColor.css" rel="stylesheet" />

<div class="container-fluid mt-4">
    <h2 class="text-muted mb-4">Notifications</h2>
    <div class="mb-3">
        <button id="markAllAsRead" class="btn-sm btn-primary">Mark All As Read</button>
        <button id="deleteAll" class="btn-sm btn-danger">Delete All</button>
    </div>
    <div id="notification-container">
        @foreach (var notification in Model)
        {
            <div class="card notification-card mb-1 @(notification.IsRead ? "read" : "")" data-id="@notification.NotificationId">
                <div class="card-body p-2">
                    <h5 class="card-title mb-1">@notification.Title</h5>
                    <p class="card-text mb-1">@notification.Message</p>
                    <footer class="blockquote-footer mb-1">
                        @notification.CreatedDate.ToString("g")
                    </footer>
                    <div class="icon-container">
                        <a href="javascript:void(0);" class="mark-as-read" data-id="@notification.NotificationId">
                            <i class="fas fa-eye"></i>
                        </a>
                        <a href="javascript:void(0);" class="delete-notification" data-id="@notification.NotificationId">
                            <i class="fas fa-trash"></i>
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Retrieve the state from localStorage, default to true (mark as read)
        let allAsRead = localStorage.getItem('allAsRead') === 'true';

        // Update the button text based on the current state
        function updateButtonText() {
            document.getElementById('markAllAsRead').textContent = allAsRead ? 'Mark All As Unread' : 'Mark All As Read';
        }

        // Initial text update
        updateButtonText();

        // Handle the "Mark All As Read/Unread" button
        document.getElementById('markAllAsRead').addEventListener('click', function () {
            allAsRead = !allAsRead; // Toggle state

            const action = allAsRead ? 'MarkAllAsRead' : 'MarkAllAsNotRead';
            const title = allAsRead ? 'Mark all as read?' : 'Mark all as unread?';
            const text = allAsRead ? 'Do you want to mark all notifications as read?' : 'Do you want to mark all notifications as unread?';
            const confirmButtonText = allAsRead ? 'Yes, mark all as read!' : 'Yes, mark all as unread!';

            Swal.fire({
                title: title,
                text: text,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: confirmButtonText,
                cancelButtonText: 'No, cancel!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/Home/${action}`, {
                        method: 'POST'
                    }).then(response => {
                        if (response.ok) {
                            Swal.fire(
                                'Updated!',
                                `All notifications have been marked as ${allAsRead ? 'read' : 'unread'}.`,
                                'success'
                            ).then(() => {
                                // Save the current state to localStorage
                                localStorage.setItem('allAsRead', allAsRead);
                                updateButtonText();
                                location.reload();
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'Something went wrong. Please try again.',
                                'error'
                            );
                        }
                    });
                }
            });
        });

        // Handle marking a single notification as read or unread
        document.querySelectorAll('.mark-as-read').forEach(button => {
            button.addEventListener('click', function () {
                const notificationId = this.getAttribute('data-id');
                const isRead = !this.closest('.notification-card').classList.contains('read');

                Swal.fire({
                    title: isRead ? 'Mark as read?' : 'Mark as unread?',
                    text: isRead ? "Do you want to mark this notification as read?" : "Do you want to mark this notification as unread?",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: isRead ? 'Yes, mark as read!' : 'Yes, mark as unread!',
                    cancelButtonText: 'No, cancel!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/Home/ToggleReadStatus?notificationId=${notificationId}&isRead=${isRead}`, {
                            method: 'POST'
                        }).then(response => {
                            if (response.ok) {
                                Swal.fire(
                                    'Updated!',
                                    `Notification has been marked as ${isRead ? 'read' : 'unread'}.`,
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    'Something went wrong. Please try again.',
                                    'error'
                                );
                            }
                        });
                    }
                });
            });
        });

        // Handle the "Delete" button for single notifications
        document.querySelectorAll('.delete-notification').forEach(button => {
            button.addEventListener('click', function () {
                const notificationId = this.getAttribute('data-id');
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/Home/DeleteNotification?NotificationId=${notificationId}`, {
                            method: 'POST'
                        }).then(response => {
                            if (response.ok) {
                                Swal.fire(
                                    'Deleted!',
                                    'Your notification has been deleted.',
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    'Something went wrong. Please try again.',
                                    'error'
                                );
                            }
                        });
                    }
                });
            });
        });

        // Handle the "Delete All" button
        document.getElementById('deleteAll').addEventListener('click', function () {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete all!',
                cancelButtonText: 'No, cancel!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Home/DeleteAllNotifications', {
                        method: 'DELETE'
                    }).then(response => {
                        if (response.ok) {
                            Swal.fire(
                                'Deleted!',
                                'All notifications have been deleted.',
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'Something went wrong. Please try again.',
                                'error'
                            );
                        }
                    });
                }
            });
        });
    });

</script>
